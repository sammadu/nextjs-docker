import type {
  GetStaticPaths,
  GetStaticProps,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

type Post = {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
};

type Props = {
  post?: Post;
};

type QueryParams = {
  slug: string;
};

export const getStaticProps: GetStaticProps<Props, QueryParams> = async ({
  params,
}) => {
  const data = await fetch(
    `https://jsonplaceholder.typicode.com/todos/${params?.slug ?? -1}`
  );
  const json = (await data.json()) as Post;

  console.log(json);

  if (!json?.id) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      post: json,
    },
  };
};

export const getStaticPaths: GetStaticPaths<QueryParams> = async () => {
  const request = await fetch("https://jsonplaceholder.typicode.com/todos");
  const json = (await request.json()) as Post[];

  const postsId = json.slice(0, 3).map((post: Post) => ({
    params: {
      slug: post.id.toString(),
    },
  }));

  return {
    paths: postsId,
    fallback: true, // fallback false returns 404 if path is not in the list
  };
};

const Post: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = ({
  post,
}) => {
  const router = useRouter();

  if (router.isFallback) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <Head>
        <title>{post?.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <pre>
        {`// pre-rendered`}
        <br />
        {JSON.stringify(post, null, 2)}
      </pre>
    </div>
  );
};

export default Post;
